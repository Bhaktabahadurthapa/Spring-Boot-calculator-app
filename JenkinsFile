pipeline {
    agent any

    tools {
        maven 'Maven 3.8.4'
        jdk 'JDK 17'
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
               // git branch: 'main', url: 'https://github.com/YourUsername/currency-converter.git'
            }
        }

        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                // Build the project and create JAR file
                sh 'mvn clean package'
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://34.94.37.99:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd mvn sonar:sonar \
                        -Dsonar.login=$SONAR_AUTH_TOKEN \
                        -Dsonar.host.url=${SONAR_URL} \
                        -Dsonar.projectKey=currency-converter \
                        -Dsonar.projectName=currency-converter
                    '''
                }
            }
        }

         stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://34.94.37.99:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "lishan2023/currency-converter:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    // Login to Docker Hub
                    withCredentials([usernamePassword(credentialsId: 'docker-cred', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    }
                    
                    // Build Docker image
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                    
                    // Push Docker image
                    sh "docker push ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Trivy Image Scanning security check') {
            steps {
                sh "trivy image lishan2023/currency-converter:${BUILD_NUMBER}"
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Spring-Boot-calculator-app"
                GIT_USER_NAME = "Bhaktabahadurthapa"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "Bhaktathapamgr5@gmail.com"
                        git config user.name "Bhaktabahadurthapa"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml
                        git add deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}